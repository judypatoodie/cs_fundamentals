1. What is a binary tree and what makes it unique to other trees?
   A:
   A binary tree is a hierarchal data structure where each node at most
   points to two children, the left and right child. The topmost node is called
   the root of the tree. The elements under the root is called it's children.
   An element directly above something is called its parent

2. What is a heuristic?
   A:
   A technique that an algorithm takes to solve a problem faster and more
   efficiently than traditional methods by sacrificing accuracy. This technique
   can be known as the "rule of thumb" and educated guesses.

3. What is another problem besides the shortest-path problem that requires the
   use of heuristics?
   A:
   Another example of using heuristics is when people read and they encounter
   a word they don't understand. Here, people would use context clues and form
   an educated guess on what the word means.

4. What is the difference between a depth-first search and a breadth-first search?
   A:
   - DFS starts at the root and explore as far as possible along each branch
     before backtracking.
   - BFS starts at the tree root and explore the neighbor nodes first, before
     moving to the next level neighbors.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
   A:
   It is a non-looping graph that explores as far along each branch as
   possible, resulting in a dead end. This graph does not calculate travel
   time between each node.

6. What kind of graph is a binary search tree?
   A:
   A directed, cyclic unweighted graph. The difference between a cyclic and
   A-cyclic is that for cyclic, nodes may form a loop -performing Depth first searches
   will result in the same nodes being revisited. A-cyclic means the nodes
   do not form loops- performing a Depth first search will result in a dead end.
   

PROGRAMMING QUESTIONS:

1. Given a Binary Search Tree and a value, write a function that checks to see
whether the value exists within the tree.

A:
class Node{
  constructor(value){
    this.value= value;
    this.left= null;
    this.right= null;
  }
}

class BinaryTree{
  constructor(){
    this.root= null;
  }

  push(value){
    var newNode = new Node(value);
    if(this.root === null){
      return this.root = newNode;
    }
    var current = this.root;
    while(current){
      if(value < current.value){
        if(current.left === null){
          return current.left = newNode;
        }
        current = current.left;
      } else {
        if(current.right === null){
          return current.right = newNode;
        }
        current = current.right;
      }
    }
  }

  contains(value){
  if(this.root === null){
    return false;
  }
  var current = this.root;

  while(current){
    if(value < current.value){
      current = current.left;
    } else if(value > current.value){
      current = current.right;
    } else {
      return true;
    }
  }
  return false;
  }
}

var binaryST= new BinaryTree();

//adds values to binary tree
binaryST.push(8);
binaryST.push(3);
binaryST.push(10);
binaryST.push(9);
binaryST.push(13);

//print tree
console.log(binaryST);
//test contains method
console.log(binaryST.contains(8));



2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that
finds the distance between the two nodes.

A:

class Node{
  constructor(value){
    this.value= value;
    this.left= null;
    this.right= null;
  }
}

class BinaryTree{
  constructor(){
    this.root= null;
  }

  push(value){
    var newNode = new Node(value);
    if(this.root === null){
      return this.root = newNode;
    }
    var current = this.root;
    while(current){
      if(value < current.value){
        if(current.left === null){
          return current.left = newNode;
        }
        current = current.left;
      } else {
        if(current.right === null){
          return current.right = newNode;
        }
        current = current.right;
      }
    }
  }

 getDistance(n1, n2) {
    var root = this.root;
    var ancestor = lowestCommonAncestor(root, n1, n2);
    var depth1 = countNodes(ancestor, n1);
    var depth2 = countNodes(ancestor, n2);

    function lowestCommonAncestor(currentNode, n1, n2) {
      if (currentNode == null)
        return null;
      if (currentNode.value == n1 || currentNode.value == n2)
        return currentNode;
      var left = lowestCommonAncestor(currentNode.left, n1, n2);
      var right = lowestCommonAncestor(currentNode.right, n1, n2);
      if(left != null && right != null)
        return currentNode;
      return left == null? right: left;
      }

    function countNodes(currentNode, targetNode) {
      if (currentNode == null)
        return 0;
      if (currentNode.value == targetNode)
        return 0;
      var left = countNodes(currentNode.left, targetNode);
      var right = countNodes(currentNode.right, targetNode);
      if (left == -1 && right == -1)
        return -1;
      return left == -1? right + 1: left + 1;
    }
    return depth1 +  depth2;
  }
}

var binaryST= new BinaryTree();
//adds nodes to binary tree
binaryST.push(8);
binaryST.push(3);
binaryST.push(2);
binaryST.push(10);
binaryST.push(9);
binaryST.push(13);

//prints binary tree
console.log(binaryST);
//gets distance between two nodes
console.log(binaryST.getDistance(13, 3))
