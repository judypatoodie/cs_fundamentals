1. What is a hash table?
    A: A type of data structure that stores each value by linking it to a key,
    which forms key-value pairs. Each key must be a unique in the hash table.
    Each of these key-value pairs are stored  by placing them at a particular
    location in an array maintained internally in the hash table. Keys must be
    converted into a unique value (hash code) by the hashing function. Keys of a
    hash table can be of any data type which then get converted (hashed) to a
    fixed length number (hash code).

2. What is hashing?
    A: Hashing is when the key in a key-value pair gets converted to a unique
    fixed length numerical index called the hash code. The "hashing"/conversion
    of the key into a hash code is done by a hashing function.

3. How does a hash table store data?
    A: A hash table stores data by using the key's hash code to determine where
    to store the key-value pair data in its internal array. In other words, hash
    tables store key-value pairs an numerical indices generated by running the
    key through a hashing function. In which index the key-value pair is stored
    in depends on the implementation of the hash function. Ideally the hash
    function should have good distribution to prevent the key-value pairs to be
    distributed to the same index.

4. How are hash tables and objects different?
    A: Hash tables should be used when your data contains a variable number of
    consistently formatted values, each with an identifier. If your data is a
    STATIC number of distinct values of different types, then use an object.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
  	A list of pets and their unique names.
  	   A: Hash Table
  	The name, age, and the birthday of your best friend.
  	   A: Object
  	The name and location of every company in a given city.
  	   A: Hash Table
  	All of the books checked out from a library by a particular individual.
  	   A: Hash Table
  	The primary and secondary phone numbers for a contact.
  	   A: Object

6. Build a system that allows a sales associate to enter a customer's name,
   address, and phone number into the system and look up customers using their
   phone numbers. Store this information in a hash table.

   A:

   class HashTable{
     constructor(size=53){
       this.keyMap = new Array(size)
     }

     hashKey(key) {
     var hash = 0;
     for (var i = 0; Math.min(key.length, 100); i++){
       let char= key[i];
       let value= char.charCodeAt(0) -96;
       hash += (hash + value) % this.keyMap.length;
       }
     return hash;
     console.log(hash);
     }

     add(key,value){
       var index = this.hashKey(key);
       if(!this.keyMap[index]){
         this.keyMap[index] = [];
       }
     this.keyMap[index].push([key, value]);
     }

     lookUp(key){
       var index=this.hashKey(key);
       if(this.keyMap[index]){
         for(let i=0; i < this.keyMap.length; i++){
           if(this.keyMap[index][i][0] === key){
             console.log('Search results below:')
             return this.keyMap[index][i][1]
           }
           return console.log('Phone number does not exist');
         }
       }
     }

     printHashTable(){
       for(let i=0; i < this.keyMap[0].length; i++){
       console.log(this.keyMap[0][i])
       }
     }
   }

   var newHT= new HashTable();
   newHT.add(6269865498,{name:'Ronald', address:' 1000 Greenland St.', phone: '626-986-5498'})
   newHT.add(4089879856,{name:'Judy', address:' 123 Greenland St.', phone: '408-987-9856'})
   //print full hash table
   newHT.printHashTable();
   //search for customer based on phone number
   console.log(newHT.lookUp(6269865498));

7. Build a system that allows a store owner to track their store's inventory
   using a hash table for storage.

   A:

      class HashTable{
        constructor(size=103){
          this.keyMap = new Array(size)
        }

        hashKey(key) {
        var hash = 0;
        for (var i = 0; i < Math.min(key.length, 100); i++){
          let char = key[i];
          let value = char.charCodeAt(0) - 96
          hash += (hash + value) % this.keyMap.length;
          }
        return hash;
        }


        add(key,value){
          var index = this.hashKey(key);
          if(!this.keyMap[index]){
            this.keyMap[index] = [];
          }
        this.keyMap[index].push([key, value]);
        }

        lookUp(key){
          var index=this.hashKey(key);
          console.log(index)
          if(this.keyMap[index]){
            for(let i=0; i < this.keyMap.length; i++){
              if(this.keyMap[index][i][0] === key){
                return this.keyMap[index][i][1];
              }
              return console.log("item doesnt exist")
            }
          }
        }
    }

    var newHT= new HashTable();
    newHT.add("30", { item: 'sugar' });
    newHT.add("35", { item: 'salt' });
    newHT.add("42", { item: 'pepper' });

    newHT.lookUp("42");

8. Build a system that allows digital copies of newspapers to be entered and
   searched by publisher and publication date. Use hash tables to store the
   necessary data.

   A:

     class HashTable {
    	constructor() {
    		this.storage = [];
    		this.storageLimit = 30;
    	}

    	add(key, value) {
    		const obj = {};
    		obj[key] = value;

    		if (this.storage.length >= this.storageLimit) {
    			return;
    		} else {
    			this.storage.push(obj);
    		}
    	}

    	lookup(key) {
    		for (let i = 0; i < this.storage.length; i++) {
          const keyVal = Object.keys(this.storage[i])[0];
    			if(keyVal === key){
            return this.storage[i][keyVal];
          }
    		}
        return console.log('Date/Year does not exist.')
    	}

    	lookupPublisher(value) {
    		for (let i = 0; i < this.storage.length; i++) {
    			const key = Object.keys(this.storage[i])[0];
    			if (this.storage[i][key] === value) {
    				return key;
    			}
    		}
         return console.log('Publisher does not exist.')
    	}

      printHT(){
        console.log(this.storage);
      }
   }

  var articleHT = new HashTable();
  articleHT.add('2019', 'Washington Post');
  articleHT.add('2020', 'SF Chronicles');
  articleHT.add('2017', 'New York Times');
  articleHT.add('2016', 'Wall Street Journal');

  //print all articles
  articleHT.printHT();
  //look up article with date
  console.log(articleHT.lookup('2020'));
  //look up article with publisher
  console.log(articleHT.lookupPublisher('SF Chronicles'));
